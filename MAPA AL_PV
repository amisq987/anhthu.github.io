code đang theo logic sau: chỉ hiển thị các rows có agchannel thuộc gallerie, Hãy tạo cho tôi một đoạn code extract dữ liệu từ các database tạo thành các cột dưới đây:
Year Month tại các bảng adprofile, prodtrans, ad-agprofile,..
, LeaderCode tại 2 bảng adprofile, ad_agprofile
, LeaderLevel có thể tìm, liên kết thông qua leadercode trùng với agcode (adprofile, prodtrans) và từ các agcode trùng thì mình sẽ liên kết với cột aglevel (adprofile) để tìm ra được leaderlevel
, Leader with NewRecruit: xác định theo logic sau: các leadercode có agcode nào thỏa mãn điều kiện: col("AGSegName") == "New Recruit", nếu điều kiện đúng thì 1, còn điều kiện sai thì null
, Leader has M1M2 Active:    xác định theo logic sau: các leadercode có agcode nào thỏa mãn điều kiện:when((col("AGSegName") == "1-3mth") & col("MonthOfService ) có giá trị 1 hoặc 2 và casecount của các agcode này > 0
, NewRecruit DirectUnit: tổng các casecount của agcode thuộc leadercode có col("AGSegName") == "New Recruit" 
, M1M1Active IPNet: tổng các IP_Net = IP_Iss – IP_Sub (các cột từ bảng prodtrans) của agcode thuộc leadercode nào thỏa mãn điều kiện:when((col("AGSegName") == "1-3mth") & col("MonthOfService ) có giá trị 1 hoặc 2 và casecount của các agcode này > 0
, NextMonth logic tương tự code đã cho     #"Added Custom" = Table.AddColumn(#"Changed Type", "Next Month", each let Year = Number.RoundDown([Year Month] / 100),
    Month = Number.Mod([Year Month], 100),
    NextYear = if Month = 12 then Year + 1 else Year,
    NextMonth = if Month = 12 then 1 else Month + 1,
    NextYearMonth = Text.PadStart(Text.From(NextYear), 4, "0") & Text.PadStart(Text.From(NextMonth), 2, "0")
 

from pyspark.sql.functions import col, when, lit, sum as _sum, floor

# Extract Gallerie agents from adprofile
gallerie_df = adprofile_filtered_df.filter(col("AGChannel") == "Gallerie").select(
    "YearMonth", "AGCode", "LeaderCode", "AGSegName", "MonthOfService"
)

# Extract Gallerie agents from prodtrans
prodtrans_gallerie_df = prodtrans_filtered_df.join(
    gallerie_df.select("AGCode").distinct(), "AGCode", "inner"
)

# Extract Gallerie agents from ad_agprofile
ad_agprofile_gallerie_df = ad_agsprofile_filtered_df.filter(col("AGChannel") == "Gallerie").select(
    "YearMonth", "AGCode", "LeaderCode"
)

# LeaderLevel: join adprofile (AGCode=LeaderCode) to get AGLevel
leader_level_df = adprofile_filtered_df.select(
    col("AGCode").alias("LeaderCode"), col("AGLevel").alias("LeaderLevel")
).distinct()

# Join LeaderLevel to gallerie_df
gallerie_with_leaderlevel_df = gallerie_df.join(
    leader_level_df, "LeaderCode", "left"
)

# Leader with NewRecruit: 1 if any AGCode under LeaderCode has AGSegName == "New Recruit"
leader_newrecruit_df = gallerie_df.filter(col("AGSegName") == "New Recruit") \
    .groupBy("LeaderCode").agg(lit(1).alias("Leader_with_NewRecruit"))

# Leader has M1M2 Active: 1 if any AGCode under LeaderCode has AGSegName == "1-3mth" and MonthOfService in (1,2) and CaseCount > 0
m1m2_active_df = prodtrans_gallerie_df.join(
    gallerie_df, ["AGCode", "YearMonth"], "inner"
).filter(
    (col("AGSegName") == "1-3mth") & (col("MonthOfService").isin([1,2])) & (col("CaseCount") > 0)
).groupBy("LeaderCode").agg(lit(1).alias("Leader_has_M1M2_Active"))

# NewRecruit DirectUnit: sum CaseCount of AGCode under LeaderCode with AGSegName == "New Recruit"
newrecruit_casecount_df = prodtrans_gallerie_df.join(
    gallerie_df, ["AGCode", "YearMonth"], "inner"
).filter(col("AGSegName") == "New Recruit") \
 .groupBy("LeaderCode").agg(_sum("CaseCount").alias("NewRecruit_DirectUnit"))

# M1M2Active IPNet: sum IP_Net = IP_Iss - IP_Sub for AGCode under LeaderCode with AGSegName == "1-3mth", MonthOfService in (1,2), CaseCount > 0
prodtrans_ipnet_df = prodtrans_gallerie_df.withColumn("IP_Net", col("IP_Iss") - col("IP_Sub"))
m1m2active_ipnet_df = prodtrans_ipnet_df.join(
    gallerie_df, ["AGCode", "YearMonth"], "inner"
).filter(
    (col("AGSegName") == "1-3mth") & (col("MonthOfService").isin([1,2])) & (col("CaseCount") > 0)
).groupBy("LeaderCode").agg(_sum("IP_Net").alias("M1M2Active_IPNet"))

# NextMonth logic
gallerie_with_leaderlevel_df = gallerie_with_leaderlevel_df.withColumn(
    "Year", floor(col("YearMonth") / 100)
).withColumn(
    "Month", col("YearMonth") % 100
).withColumn(
    "NextYear", when(col("Month") == 12, col("Year") + 1).otherwise(col("Year"))
).withColumn(
    "NextMonth", when(col("Month") == 12, lit(1)).otherwise(col("Month") + 1)
).withColumn(
    "NextYearMonth", (col("NextYear") * 100 + col("NextMonth")).cast("int")
)

# Combine all features
result_df = gallerie_with_leaderlevel_df \
    .join(leader_newrecruit_df, "LeaderCode", "left") \
    .join(m1m2_active_df, "LeaderCode", "left") \
    .join(newrecruit_casecount_df, "LeaderCode", "left") \
    .join(m1m2active_ipnet_df, "LeaderCode", "left") \
    .select(
        "YearMonth", "LeaderCode", "LeaderLevel",
        "Leader_with_NewRecruit", "Leader_has_M1M2_Active",
        "NewRecruit_DirectUnit", "M1M2Active_IPNet", "NextYearMonth"
    ).distinct()

display(result_df.orderBy("YearMonth", "LeaderCode"))
